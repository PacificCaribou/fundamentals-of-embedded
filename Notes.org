* Fundamentals of Embedded Notes
** Learning Goals
   You will learn to design embedded systems front to back on your own at a
   high level.
** Coursework
*** Supplement #1
    It is difficult to access Cambridge's network without access. In lieu of
    hacking, I've opted to make my own challenge s.t. I can get the skills
    necessary from Coursework #1 without going to jail.

    Coursework #1 is meant to lead us to:

    1. compile C and ASM to geterate S-record format binaries
    2. run S-record format binary (on Sunflower or embedded platform)
    3. use Sunflower man / help
    4. use information in map file + emulator to debug program
    5. apply understanding of map files, binary files, object files, and
       interrupts to new challenges
**** Tasklist
     - [-] compile C and ASM to S-record
       - [X] learn about S-record
       - [ ] find a use for it
       - [ ] build something using it
     - [ ] run S-record format binary
       - [ ] find a way to run it (on an actual chip)
       - [ ] run it
     - [ ] use information in map file + emulator
       - [ ] what is map file
       - [ ] GDB review
     - [ ] build something to demonstrate understanding
       - [ ] capstone
       - [ ] barely in-reach
*** Coursework #2
    - [ ] read assignment
    - [ ] read Appendix C
      - [ ] read
      - [ ] install cross compilation tools
    - [ ] read Appendix B
    - [ ] read datasheet for board
      - [ ] key parts
    - [ ] load program using JLink
    - [ ] run program on board
    - [ ] power LED with board
** Scaffold
   A preview of what's to come. Content is deleted as I progress
   through each section.

   - introduction
   - precision, accuracy, measurement uncertainty
     - sources of noise
     - how noise affects computation
     - propogating uncertainties
       - deriving Uncertainty Propogation Approximation
   - C programming for embedded systems
     - minimal C program examples
     - what goes on? what happens during eventual execution?
   - coursework 1
     - embedded processor emulator
     - est. ~6 hours
     - GCC and Binutils to compile, link, and disassemble
     - learning objectives
       - write simple program susing C and ASM
       - compile and run directly on embedded with no OS
       - create, use, and edit Makefiles and Linker Command files
       - use Linker Map Files, differentiate from Linker Command Files
   - embedded I/O interfaces
     - sensors I2C and SVI
   - Bayesian view of measurements
     - basic statistics
     - Bayesian statistics
   - coursework 2
     - OLED display control over SPI
     - est. ~6 hours
     - learning objectives
       - hands-on driver in C over SPI
       - should be able to read datasheet and write driver in C
   - FPGAs and Verilog
     - PL/PLAs
     - LUTs / FPGAs
   - displays and perception
     - perception of color
     - OLED displays
       - reducing power consumption in ways humans can't see
   - project proposal
     - est. ~2 hours
     - identify interesting eng problem and use embedded to solve
   - physical laws, invariants, noether theorem
     - signals
     - stationary action
   - wireless communication and BLE
   - case study: design, schematics, layout, manufacture
   - power, performance, noise
     - ways to measure all
   - power measurement
     - est. ~6 hours
     - learning goals
       - read datasheet and write driver in C to interface
   - coureswork 5
     - project interim report
     - ~20 hours
     - learning goals
       - understand how you would implement using PCB
